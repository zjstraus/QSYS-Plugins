--[[
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
]]

ICON_DATA = {
  ["01d"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADe0lEQVR4nO3cWahNURzH8a8picg1hqLEC4UMGe6DKfMDhaQkojwpRZQHxZs3PChSui+elGSWkHnMTB5MV0mUISQUrSy6xO24Z6//f+38PnW6t+5t/9Y5v3P2uPZBRERERERERERERERERERERERERMRMM6ugl8tnFLWoGqAWGAoMBHoAHePfmgNvgBfATeA6cAZ4XERw5837ilhMo1omTyhGf2AiMB6YArStYKlTG/x+Agiv5mngQs5PNPdC+gDrgQVVLmdsfATHgbXAuQLGV7jmOQ4K6ALUAQ8KKON344CzwDFgeMHLrlqOhcwD7sQiUm7jwurvIrAqYcY/y62QbcCusP00zNwInMpl9Z1TIYeApU7ZtfFT2dsp/6ccCmkZN7STncfRL67CXEvJoZDDDfaAvHUFznuuvrwL2R43rjnpDlwCWnmMybOQWcASx/zGDAY2eAR7FdIe2OmUXanVHqtSr0K2x1JyZ/6m8SikEzDXIbcpwh7XdMtAj0K2OmRWYwfQwirMupDwjptjnFmtbsAkqzDrQqZW8D85mmY1JutCphjnFWW+1cGiZSHtrDeQBaqJp+2TsyxkbImuUP6JyafbspCRhlkpDLEIsSxkgGFWCl0sQiwL6WmYlUIlEyuqZllIB8OsFFpbhFgW8tUwq7QsC8l1hktWLF+k9yV4PRrzxSLEspBnhlkpvLMIsSzknmFWCq8tQiwLuWyYlcIdixDLQo4ZZqVw1CLEspDncfZ5GX2KE/mSs94V3VvSQnYDby2CrAsx+dgnsN8qyLqQa3G6Zpl8Bg5Yjdfj6HmxQ2Y1wu0Kr6zCPAq5XaJd4A/AJstAr/NLi5xy/9Vy60CvQm4Ba5yyK7Unzsky5XkGdmO81y9H4dbqZR7j8iwkXB8ZA9Q7juFvRsUDWXM5XKMYHb5XIINx/BDu5LrrFZ5DIU+BEcCjDMYS5o0d8RxALlfxHsZZKVed8sNxxiDLA8C/yemyatjnHxm/ucFSXbxj6obv0/8ut+vc4TTFujhL8ErirPp4nLEQeJI4q2K5TjwId+YOA2YD9wtedjhruxLoC2wpeNlVy32u7e74mAlMiD97NWE57+KBXthgH8xsr+4XZZn8vCc+VjT4mqYhcXpnmFXfJv5f+G6Uj3F79DJedj0Zr1ZmW4KIiIiIiIiIiIiIiIiIiIiIiIjI/wH4BqdEdDZEJK4oAAAAAElFTkSuQmCC",
  ["01n"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADeElEQVR4nO3cWYiOURzH8a8tichYQ1HihkKWbBe2GNxQlEQiypVSRLlQ3LmTC2UpceFKSZZBQvY1O7mwl0RZQkLRyaEhxjve5/z/58nvU2+jTM/vzPzmfbZznhcRERERERERERERERERERERERERETNNrIJqa6cUtakaYDQwGOgPdAPax/9rCrwGngPXgavAKeBhEcF1dfuL2EyDmidPKEZfYAIwLnQLtK5gq5Pr/fsYsBc4CZzL+QfNvZBewBpgbpXbGRNfwVFgFXCmgPEVrmmOgwI6ATuAewWU8auxwGngCDC04G1XLcdCZgG3gDmJj3Fh93ceWJ4wo9FyK2QTsBPoaJi5DjiRy+47p0LqgEVO2aPju7KnU/4PORTSPB5oJzmPo0/chbmWkkMhB+udAXnrDJz13H15F7I5Hlxz0hW4ALTwGJNnIdOBhY75DRkIrPUI9iqkLbDNKbtSKzx2pV6FbIml5M78j8ajkA7ATIfcfxHOuKZaBnoUstEhsxpbgWZWYdaF9CzRu+O7LsBEqzDrQiZX8D05Kmwy52+sC6k1zivKbKuLRctC2lgfIAtUE2/bJ2dZyJgSzVD+jsm727KQ4YZZKQyyCLEspJ9hVgqdLEIsC+lumJVCJQsrqmZZSDvDrBRaWoRYFvLFMKu0LAvJdYVLVix/Se9K8PtoyGeLEMtCnhpmpfDWIsSykDuGWSm8sgixLOSiYVYKtyxCLAs5YpiVwmGLEMtCnsXV52X0MS7kS876VHRPSQvZBbyxCLIuxORtn8A+qyDrQq7E5Zpl8glI/+hU5HH1vMAhsxrhcYWXVmEehdws0Snwe2C9ZaDX/aX5TrmNtcQ60KuQG8BKp+xK7Y5rskx53oFdF5/1y1F4tHqxx7g8CwnzI6OAx45j+JMR8ULWXA5zFCOBFxmM47vwJNdtr/AcCnkCDAMeZDCWsG7skOcAcpnFux9XpVx2yg/XGQMsLwD/JKdp1XDOPzx+coOl7fGJqWu+P/43uc1zh9sUq+MqwUuJsx7H64x5wKPEWRXLdeFBeDJ3CDADuFvwtsNd22VAb2BDwduuWu5rbXfF1zRgfPza4x+28zZe6IUD9oHMzup+UpbFz7vja2m9j2kaFJd3hlX1reL3hc9G+RCPRy/itOvxOFuZbQkiIiIiIiIiIiIiIiIiIiIiIiIi/wfgKw42dDZq2n0SAAAAAElFTkSuQmCC",
  ["02d"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAGI0lEQVR4nO2be4hUVRzHP/femd3ZdR+ma7m+3QwfVD4qIjOtSCoK0worIygrKIoyECL/yaggMYxEqBRKIikrCMssVEqL0CyhB9o/6Ua6K8u6q/venb0zN86dM+VjH87MufPYfh8Ydpm593d+937v+f3O79xzEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEM7HMnVPWltbcnZ7rfIK3G2bcbesw6qeONjh04GFwFxgKlANlAI9QD1wBPgB2A38moofVeu3Z3QdilDGFgqDcuBBYDFwaz8eq2OqgCuBJfq774GtwMdAYzau1C6gm5ouD+mn/q0BxOiPG4AN+vynsuHsUBZEPe2fAu8DozK0Va6F+RqoMeRfnwxVQSYBB4B7DNtVPexnHdYCId9ziAPMA+YAo7W/J4HfgH1A879Hui54cfWfyup/AJGAfLoI+AWYCfxu2ni+CjIDeFw/4eP7OaZNh6SNwH6KI2DbKkx9E6AYSSw9EpumR2bGyMeQ9R5wCFgxgBjouP6I7ik7rTGTRuG6bxCP1WAZG80PhGr/S9NG80kQlSxVfH441RO9aM9CZ+rMo/Z1ty3z6mqD8a5vZgErTRrMF0GqtBhXpXV2VxcMKy8rWrnOtq+5Ga++FhzHuJP9sBYYa8pYvghyUCfL9LBtvJbT/qnhFWuxRk/Eazzhf58lHjPVTD4I8iIwIWMrvigtWCWlhJevgt4e6I0acfACGDKCqFHKamPWbAuvswN71lychUvxGuvJUoIfB9xuwlCuBXnSuEW31/9jz5yXECNRm5yBZ7xJzX0mjOS6DrneuEXLhriHXTMDa9yl0HYabAfv9EmIuYm8Eo+BE8YaPhIipRA/V7S0MFK951KQal2BG8fr6sQaUYU95QrcrRuwplyOs2AR1vgpWKEwXjyG9/efxA7uhfq/sC4eB06oj96UEpUmriOXgswy+T7mLFQPUJSUYc+eR/iZNdiTpp53mHP8KLFt7xL79jOsEZdAWWWiF6VHqQnXc/mCSo1MNplq/zwcB6+pAWvUGKxIBK+9PSGUn1c8P4xZZWX+WbE9n+NuXgPFxb6I/u+p01y1fvvITN3OZVIPdvjT24s1ZrKfK/waRYWj5IhLJ3v1vdcTJXTjIpy7lidql/QxkohyKciuQK2r5N3ZBt0d/ReI6vueLuLRXkJLHsWeMx/v5Il0h8qdGXrsk80cMlvXHSN0u5X6qcrt0Fvd/K4OKBru1y7xQz/p0JayW+0m3MmGIPcCzwNX9/FbYEVBSugeZI2tSSR3VeEXpTyDb2QaPkhB1Lh8PbBggGOyUkZfEOrRCBdBpATaTqVj4QsTbgQliFocsDevbviFoMJX+lMtW0y4EIQgqmd8F4DdYFE6nGrEqz3sV/p+TwkXY5WWQWTYYEXjh0CTCf9MCzJMLzArPFRBGI/j3HQ3VuVIvM42PCXQ8SP++xVVz/h5JVl0ns1GU9drWpBnDSy5yQleRzvWhMsIP/3qf83HPbyGY7g7PiC26xO/1/hJ/+xqXkWDPaZ8NlmpFwF1+u1fYZLMIX6lbvnzW1ZJYrQV+3E37qaX1etirKrqpChq+elkwK8oTSwlNVkDPFDQYiiUEGrmV/1VOcON4rW2+O9YQtfeQnjVO4mRWGtzMvk/kRTDFCYFWWzSsbxB3fiYS7ytDadmGuFlzxGvq8VrbljhtTRt9lqaSH5MYDKHTC/k+z4wibmveDSKPf9OQocPvB2vq33TKjt3xn2fiZbM0Nra0ljwIWswVDhTw+FQ0Ut0d6xWM8ZnUlGa+Qy8yZDVY9BWfuJPRnZDtGepqlF8Qc78GMBkyGowuT4pb1E5xY1W4vrRxfhcnMkeknkALRycoGapTRr9wKCtfEeF5z5L9kwxKch+vSfj/0Bg29tMdztzi97ym4+C8s60IF/pTZJDGdU7Xg/q+oJITPcP8QSf8naJVAjqfbbaA74jINu55IWgryvIBQZ36On4YwG2kS2O6+3VrwXdXjYWykX0fsEleouaWnUSNtVugLTqhQs7gVeA7sGaqqgwsppUEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEIRcA/wDoOOQV9MnNu8AAAAASUVORK5CYII=",
  ["02n"] = "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",
  ["03d"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADDElEQVR4nO3bT4hNYRjH8e8YIqPLICSR/NtoShQKK5qJbOxIig3Z+FuUWCglTFiIBSn/diwoGxY0SGOnxAIloUgyG8bI6K136qo73TO35znnPeP3qdnMnfu8zzm/O+e85z3nIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqXW5NF8T89365ITgE3AamAu0AL0AR+BZ8B14Ln1oFlUKuNN66UeyFLgELAWaK7zty+A08Alq8Gz+J8COQAcb+B9T4H20IZFE/VYBzLCo0kDtxsMI1gGhE/E4qS2KKMUA7kJrDeocw+Yb1AnV6kFshPYYFSrFbhhVCs3KQXSBpwzrhkOW3uNa7pKKZAwrfVwBJhc7KZll0ogYUq70al2mAZ1ONU2l0og64CZjvWX1Phdc4qTmlQaWu5cf2AKvAi4AnTHq/z3wEPgAjDHuYdMRqbQBDDbuX4FOAwcrfHadGAVsB3YHJdhCpNKIOOc67fFn3quxQnAWed+BpXKIetrAj0MOAOsLGrwIgOZVHXc/lZgH7VsK2rgvBcXw7L5LmALMC9+IPqBX8Boj14a9BOYBXyu9/ayLi6OBU7GQ9MxYEHV2E2JhRGMGWSq7C6Pk3q4uXS/hKuvLUUM6h1ICOMVMNV5HA/vihjUM5BwJdxV0jA+xFvE4d5KL/AynlfceQayB1iYx0Y4mAg8iecS4t3HW8BF4LHnwF6zrFHAW2CGR/2CXa6eFpdllrV1mIZB3LYur33nFUi7U91UrABOePTiFUghc/ic7YsnfVNegbSmuAcd7LcumepjQGWRZQV5SLwC+VKq3dq4KdYFvQLpdqqbGvP95xXIXae6qemz7scrkKvAG6faKflk3YvnSb3TsXYqHln34RnIeeCBY/2i/QZOWffgPe3tKGoZOwcHgdfWw3gH0hvvDg63/5ROr0NyHheGIZQ18bko8++65ewHsNvjCn1A3g85hJtWO+KD1dOq7jf0e/RhIHxg/8SnYu7ELxH9880s6+V3ERERERERERERERERERERERERERERERGRoQD+AsqjaPphCrlmAAAAAElFTkSuQmCC",
  ["03n"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAADDElEQVR4nO3bT4hNYRjH8e8YIqPLICSR/NtoShQKK5qJbOxIig3Z+FuUWCglTFiIBSn/diwoGxY0SGOnxAIloUgyG8bI6K136qo73TO35znnPeP3qdnMnfu8zzm/O+e85z3nIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqXW5NF8T89365ITgE3AamAu0AL0AR+BZ8B14Ln1oFlUKuNN66UeyFLgELAWaK7zty+A08Alq8Gz+J8COQAcb+B9T4H20IZFE/VYBzLCo0kDtxsMI1gGhE/E4qS2KKMUA7kJrDeocw+Yb1AnV6kFshPYYFSrFbhhVCs3KQXSBpwzrhkOW3uNa7pKKZAwrfVwBJhc7KZll0ogYUq70al2mAZ1ONU2l0og64CZjvWX1Phdc4qTmlQaWu5cf2AKvAi4AnTHq/z3wEPgAjDHuYdMRqbQBDDbuX4FOAwcrfHadGAVsB3YHJdhCpNKIOOc67fFn3quxQnAWed+BpXKIetrAj0MOAOsLGrwIgOZVHXc/lZgH7VsK2rgvBcXw7L5LmALMC9+IPqBX8Boj14a9BOYBXyu9/ayLi6OBU7GQ9MxYEHV2E2JhRGMGWSq7C6Pk3q4uXS/hKuvLUUM6h1ICOMVMNV5HA/vihjUM5BwJdxV0jA+xFvE4d5KL/AynlfceQayB1iYx0Y4mAg8iecS4t3HW8BF4LHnwF6zrFHAW2CGR/2CXa6eFpdllrV1mIZB3LYur33nFUi7U91UrABOePTiFUghc/ic7YsnfVNegbSmuAcd7LcumepjQGWRZQV5SLwC+VKq3dq4KdYFvQLpdqqbGvP95xXIXae6qemz7scrkKvAG6faKflk3YvnSb3TsXYqHln34RnIeeCBY/2i/QZOWffgPe3tKGoZOwcHgdfWw3gH0hvvDg63/5ROr0NyHheGIZQ18bko8++65ewHsNvjCn1A3g85hJtWO+KD1dOq7jf0e/RhIHxg/8SnYu7ELxH9880s6+V3ERERERERERERERERERERERERERERERGRoQD+AsqjaPphCrlmAAAAAElFTkSuQmCC",
  ["04d"] = "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",
  ["04n"] = "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",
  ["09d"] = "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",
  ["09n"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAKUElEQVR4nO2ce1BU1x3HvxeW1y4gUF4CRrCZUBCF0YqpMYmhD9PaxCYNMG3aaX1H46TpmGqaiWaitrbYOtNM1LSNaUR8zVRN8gchHW0QxZFOq0aBtgFUnhqqvJbXwi638zucpet2kb27e5Zr5nxmduZyl3vuued7z/n9zu/8zkIikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJJLPM4qoZ+vp6RZSbkREJM6dO4cXX9yAqKgpCAwMdPx6KYDvAVgAIAqADUAtgBMAdgMY8FU9yspKfVXUHQQIKdX/zANwHMB7AAoBTCPtuCgkzk4A/wawTO8PYtBBHTQzNDQMq9WKgAD2PmUD+JsbZZBI7wCYAWCzvp7of9yTPSQiwoTQ0FDYbLbpAC5qvPxVAD8WVDWvuRcEoV48FUAS2TxVtSE9PR2JifHo6THvUhTFEztI9iRGQF29Rq+CKNwWHAPQxD+N9OnvHzgSHh6Rl5OTnV5f3/D0yMiIfejSghHAa5P6hOOgRxuyig8r97n4bprNZiu0WCyFGzZs6LdabSguPoDU1FSEh4fTEKblPl9zOJ7LHYDrABq8fwTP0VsP+R2AP4wjBoNGqMHBAZhMJuPWra9jy5bN6Orqgtls1tpTjNyWnAfwdwAnAdRzby3bJ0/jAXoSZB+AF9z5R2r47u4uWK3DWL58GdaufQ4tLS1ae0gqgD8BmO90/ikAlwCka6q9j9CLIN8EsFzLBSRKf38/LJZBrFmzGs8++300N7d4Yk/Go8RXBWlBD4JEAjjsyYWjw9cgO169eiUiIyPG/vYBX+YTTr+iB0G+DWCKpxdTjyCbkpIyDQsWfAW3bt1i5/v6+thxR0cHhoaG4Jl3jIc8rZen6EGQB70tgBqcyMtbhNbWNly7do3FvHJycpCRkQGLxYKGhgb09vbCYNDkWJ7ytm5a0YPbm+ttAfa3Pzo6BosWPYKCggIsXPgQYmNjQfOU+vo6lJdX4MSJ93Dz5k0kJCS44wCMcLtGUdJ2AFUA/uFtXSd8FlEFa4j2XgWQ5u396M3v7OxEVFQUjEYTOzc0ZGFDmsEQxP6ura3FihWrmEhxcXETiaK6aJ9tALbgcx7t7fJFITRsUY+gGBe5xGZzDxuqBgYG2MvR12dGZmYm3nzzDSYSnZ8AVy8rBSXf9kV9x2OyBKGJ31cBPAZg2BcFUiOTAGTMnV1fGtJsthEMDPRj7ty5WLz4G2zo8pAVAL7rizq7wt825IcAnncxGRMOiTI8PIywMCAj40tQVZV9PPS+tvI4m8/xlyCLeIQ100/3c4m98adOnQqj0eiNIF8QVUd/CJI3Ge7j3bh9+zZaW1uZmTAaw5jdIaeABHITYUO9aEHu05sY1Og9PWbMmTMH8fHxaG9vx40bNxAQEIiEhPixoWwCfGL3XCHa7S3lcSrdQEMULf/SkEVub1dXNz79tA57976FixcvIi0tjTkFE4hSXFZW+iMRzyTSy5qtNzEImoOEhYWxRg8KMjB78uijj6CkZD+WLn0S169fn6iITgAbRdVP5JC1TmDZHkM9xB5qGWWQiTRlShSKin7N3OYzZyoxbVoKO+8EXfh1AJ+Jqp/IHuJ1SMRf2NdXiFdeeZnmM8NkWxziXuQBvMEzVoSGT0QKEi2wbJ8zOnvvQ3JyCrZv37rMarU+0NbWNtNgMGTwxayfcGHE1kNg2VaBZQuB8r36+/uQn/9M4v7979YZjcbaxsamfxkMBr89i0hBJjVZwBOol5AH1ttrzp09exaKi99li14Uzg8KCvJPHQSWfUJg2cIgo6+q6iC57eQCkygxMTHMNSavTDQiBdnH1xLuRapIGBJlxowZOHLkENLTH8CFC5fYAlhbW5u4F0JUwXxiuIqn9bgNTcjIu6EPRW8niSj7y2R3ibu6OrFjRxH6+nrZpHLnziIhNfPHAtUHAJ5w5xp6eBLCZAq/oxwPA4CeQkHQ9c71IlEcEVUnf6yHPOmuPQkODmZiUBhjyZInUFV1/g5x/ECpsxjgxp4WvKh30JoKeWKi8NcC1dN8YadmvH8YDWkY0dragt2796C8vBx79/6eNQYJJRiVr3EsudttqI7khWlMyNOEPxeo3uGffL4+ckdmoN2tLCk5+KDVajNRhntcXNxNRVFq7IE+7gG5LJzO09huXz+nrEZKpJtgaKFQyFkAR/ja/qSjiy1t1JiRkVPw4YdlWL/+hVfvv/+L28igh4WFzdy16ze1lMrjDA0f9KbStfbxnYaT8+ermAi5ufPGkh0oLOLDjEYG1VcEk5oG5PxWf/LJZWrMXxkMhk5FUT5ramqptTdkRUUFa2zaUzh/fi4WLlw4Vk53dzeOHTuOkydP4cqV6pkAQmbNmnkhLy8PBQX5TLDeXjMbcvzsIGhmUnoICRESEoKQENoFZcXHH5fj8OGjuHr1GoKDg9jbTI1HveSllzagsbERe/a8xfJ4R0ZUtvWgsDCf5fOSGJs3v8bEjI2NzYmPj2M7qtrb//Pw7du3zlKmyY4dv0R29mwmioZVwbsiqof4VRBq5IiICLY6R5SWlqK4uASXL19hQlCuFBlwe9ibXGBKBaWtBpTcFhwcvE1RlMbBwcG3aXKWmJjIjCzl89K1qqpeVFU1B6P2pkhRlE00kaNU0wMH9mPevHk+c6PvOUFojLcTGhqCgIDR0ZHyod5//wOcPn0aZ86cRWCgAUlJU6mRHlZVlXJpDzhGVclOUI9RFGUx5afx07sVRVlPZVHj0oITF/GvPLWIoP2HTTTENTU1Yfr06di374+IiYl2JydrQu45G2I3qOBG1WzuZT3h4MFDqKw8h8jISKSkpDCbQI2pqiplwCcD+AVvzBa61mEf+usOxQfQ0EPJCeA9j/Md/n+X+DY4Jijdp77+Kqqrq0F2xYfb1X2OMEE2btw0tjbd3NyMjo4uNsegISkrK5PZAvqON2YSFwPjzI3mOORy0X6Dn41z2x4AP3U+ScNaeLiJ2S29I0yQjz76CzegCkwmIxMiOTmZiURZhE783OHP4/be4cBSh+NyGhG11md0Dd0/IXRvECZIUlKSy/MuvJxQp3DFdheXneKz/XgeRdaMxTI0NsSRs0BZjHp0gfWQbE1xiP38uHqcHwKoADCL/xrDn7XegOxQeDhFaH+LyspKFqIho+xmDpZf0YMgw3w3LNmIb7n4Po1vxAQPdTiTzRMPaKj7/yk9Jzo6GjU1NVi3bj3Wrn0eVVVVTBQ3crD8irA++/jjrtpWM8HcW0rgyc3PuCjgJM+kB9+7sW28m1Dj01BVV1fHdlgdPXqI7bDyZG4iyu3V+09rPMbFAN8C4NxqGQ5iEIfuVhh5dDR8ZWVlwWAIxMqVq9nEkxrXRQ7WpKB3Qei3rsz8+Ac8TO7IUw7HDe4mVpAbTE5HR0cnNm16mZ2jeJceRNG7IM08TE8G/aCL7yl0/k+e3rlTS8E0YUxLS0VFxVmsWfMc2w5HM36JRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkogDwX+zkxYQA9SwvAAAAAElFTkSuQmCC",
  ["10d"] = "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",
  ["10n"] = "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",
  ["11d"] = "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",
  ["11n"] = "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",
  ["13d"] = "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",
  ["13n"] = "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",
  ["50d"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACUUlEQVR4nO3aTYiNURjA8f81ykc+RykWVuzERllIysZQYmnH2oKi2Ngoa9kqydpGLDQjq1nYCGVBTREWjHwtRETSW2dqRvfeuh/nnMfc/69ud/We53nvc8+5zz3nRZIkSZIkSZIkSZIkSZIkSZIkSZIWrVbOG5uYODTI5TuBaWAN8LWP61cDn4G9wLNBEvnX5OTdYQ63wNJsIw9ufyoG6cPtx3gaZ6gFySlyQa4Cu4FtwJc+rl8PzADXM+SWTeSCfAeOBcijqCUjdK//BQsSTMklaxdwCfgN/Cz8MaxKHdcp4EPh2D0pWZAzwIGC8dp5A5yvnENXJQtyD9gDfEyzpKRlwApgqnDcnpUsyI30Uhf+qAdjQYKJ+sdwHXAEWFmhI+uk+fIuBx4Aj3MFiVqQC8DZAHm0MwtsyjV41CXrbYAcOnmXc/CoM+QycDu1qqVb5E6ao4ox4HXOIJE3F18EyKE4u6xgcs+Q7cDBtJX+J8itt9LBV7MkPg+QzwK5C3IL2Jo5Rr8Op62cUHIvWTPRbniel2EymSf3DDkK7Eibe1G6pbkv4dPKebSVuyC/gEeZYywqdlnB1P4fshY4DWxInVgErfT40E3gful8ahfkCnCicg6dHAe2AO9LBq29ZL2qHL+b5rj3U+mgtWfIReAOsBn4UTmXOa3UFT6s0RlG2Mt6kl4jD7useKLu9m4ETqalY9gnhmPpJPLaKO5l9as5LTyXOUbz4N6+zDF6FrUgs+n9W4Zd4lZ6kjFyhydJkiRJkiRJkiRJkiRJkiRJkiRpYMBfS4pFdt7boNAAAAAASUVORK5CYII=",
  ["50n"] = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAACUUlEQVR4nO3aTYiNURjA8f81ykc+RykWVuzERllIysZQYmnH2oKi2Ngoa9kqydpGLDQjq1nYCGVBTREWjHwtRETSW2dqRvfeuh/nnMfc/69ud/We53nvc8+5zz3nRZIkSZIkSZIkSZIkSZIkSZIkSZIWrVbOG5uYODTI5TuBaWAN8LWP61cDn4G9wLNBEvnX5OTdYQ63wNJsIw9ufyoG6cPtx3gaZ6gFySlyQa4Cu4FtwJc+rl8PzADXM+SWTeSCfAeOBcijqCUjdK//BQsSTMklaxdwCfgN/Cz8MaxKHdcp4EPh2D0pWZAzwIGC8dp5A5yvnENXJQtyD9gDfEyzpKRlwApgqnDcnpUsyI30Uhf+qAdjQYKJ+sdwHXAEWFmhI+uk+fIuBx4Aj3MFiVqQC8DZAHm0MwtsyjV41CXrbYAcOnmXc/CoM+QycDu1qqVb5E6ao4ox4HXOIJE3F18EyKE4u6xgcs+Q7cDBtJX+J8itt9LBV7MkPg+QzwK5C3IL2Jo5Rr8Op62cUHIvWTPRbniel2EymSf3DDkK7Eibe1G6pbkv4dPKebSVuyC/gEeZYywqdlnB1P4fshY4DWxInVgErfT40E3gful8ahfkCnCicg6dHAe2AO9LBq29ZL2qHL+b5rj3U+mgtWfIReAOsBn4UTmXOa3UFT6s0RlG2Mt6kl4jD7useKLu9m4ETqalY9gnhmPpJPLaKO5l9as5LTyXOUbz4N6+zDF6FrUgs+n9W4Zd4lZ6kjFyhydJkiRJkiRJkiRJkiRJkiRJkiRpYMBfS4pFdt7boNAAAAAASUVORK5CYII="
}

PluginInfo = {
  Name = "Zach Strauss~OpenWeatherMap",
  Version = "1.0.1",
  Id = "7a5fcdeb-6f66-4974-84ff-eb5aab5527a9",
  Description = "Initial client for OpenWeatherMap API",
  ShowDebug = true,
  Type = Reflect and Reflect.Types.Other or 0,
  IsManaged = true
}

function GetPrettyName()
  return "OpenWeatherMap API"
end

function GetColor()
  return {13, 219, 133}
end

function GetProperties()
  return {
    {
      Name = "Forecast Hours",
      Type = "integer",
      Max = 24,
      Min = 0,
      Value = 6
    },
    {
      Name = "Forecast Days",
      Type = "integer",
      Max = 7,
      Min = 0,
      Value = 5
    },
    {
      Name = "Units",
      Type = "enum",
      Choices = {
        "US",
        "Metric"
      },
      Value = "US"
    }
  }
end

function GetControls(properties)
  local hours = properties["Forecast Hours"].Value
  local days = properties["Forecast Days"].Value
  
  local controls = {
    {
      Name = "Status",
      ControlType = "Indicator",
      IndicatorType = Refelct and "StatusGP" or "Status",
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "API Key",
      ControlType = "Text",
      UserPin = false
    },
    {
      Name = "Latitude",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Input"
    },
    {
      Name = "Longitude",
      ControlType = "Text",
      UserPin = true,
      PinStyle = "Input"
    },
    {
      Name = "Update",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = true,
      PinStyle = "Input"
    },
    {
      Name = "Forecast Time",
      ControlType = "Indicator",
      IndicatorType = "Text",
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Description",
      ControlType = "Indicator",
      IndicatorType = "Text",
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Temperature",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = -100,
      Max = 200,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Feels Like",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = -100,
      Max = 200,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Humidity",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = 0,
      Max = 100,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Clouds",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = 0,
      Max = 100,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Dew Point",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = -100,
      Max = 200,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Pressure",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = 900,
      Max = 1000,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "UV Index",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = 0,
      Max = 20,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Wind Speed",
      ControlType = "Knob",
      ControlUnit = "Float",
      Min = 0,
      Max = 100,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Wind Heading",
      ControlType = "Knob",
      ControlUnit = "Integer",
      Min = 0,
      Max = 359,
      UserPin = true,
      PinStyle = "Output"
    },
    {
      Name = "Icon",
      ControlType = "Button",
      ButtonType = "Trigger",
      UserPin = false,
      IconType = "Image"
    }
  }

  if hours > 0 then
    for i=1, hours do
      table.insert(controls, {
        Name = "Hour " .. i .. " Time",
        ControlType = "Indicator",
        IndicatorType = "Text",
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Description",
        ControlType = "Indicator",
        IndicatorType = "Text",
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Feels Like",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Humidity",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Dew Point",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Wind Speed",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = 0,
        Max = 100,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i ..  " Wind Heading",
        ControlType = "Knob",
        ControlUnit = "Integer",
        Min = 0,
        Max = 359,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Hour " .. i .. " Icon",
        ControlType = "Button",
        ButtonType = "Trigger",
        UserPin = false,
        IconType = "Image"
      })
    end
  end

  if days > 0 then
    for i=1, days do
      table.insert(controls, {
        Name = "Day " .. i ..  " Day",
        ControlType = "Indicator",
        IndicatorType = "Text",
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i ..  " Description",
        ControlType = "Indicator",
        IndicatorType = "Text",
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i ..  " High Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i ..  " Low Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " ..  i ..  " Morning Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Evening Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Day Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Night Temperature",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Humidity",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Dew Point",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = -100,
        Max = 200,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Cloud",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = 0,
        Max = 100,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " UV Index",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = 0,
        Max = 20,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Wind Speed",
        ControlType = "Knob",
        ControlUnit = "Float",
        Min = 0,
        Max = 100,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Wind Heading",
        ControlType = "Knob",
        ControlUnit = "Integer",
        Min = 0,
        Max = 359,
        UserPin = true,
        PinStyle = "Output"
      })
      table.insert(controls, {
        Name = "Day " .. i .. " Icon",
        ControlType = "Button",
        ButtonType = "Trigger",
        UserPin = false,
        IconType = "Image"
      })
    end
  end

  return controls
end

function GetPages(properties)
  local pages = {
    {
      name = "Setup"
    },
    {
      name = "Current"
    }
  }
  
  local hours = properties["Forecast Hours"].Value
  if hours > 0 then
    table.insert(pages, {
      name = "Hourly"
    })
  end

  local days = properties["Forecast Days"].Value
  if days > 0 then
    table.insert(pages, {
      name = "Daily"
    })
  end
  return pages
end

function GetControlLayout(properties)
  local pages = GetPages(properties)
  local page_index = properties["page_index"].Value

  local layout = {}
  local graphics = {}

  for k, v in pairs(pages) do
    if k == page_index then 
      if v.name == "Setup" then
        layout["API Key"] = {
          Style = "Text",
          Position = { 62, 5 },
          Size = { 195, 16 }
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "API Key",
          Position = { 7, 5 },
          Size = { 55, 16 },
          HTextAlign = "Left"
        })

        layout["Update"] = {
          Style = "Button",
          ButtonStyle = "Trigger",
          Color = { 170, 170, 170 },
          Position = { 262, 5 },
          Size = { 55, 32 },
          Legend = "Update"
        }

        layout["Latitude"] = {
          Style = "Text",
          Position = { 77, 21 },
          Size = { 55, 16 }
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Latitude",
          Position = { 7, 21 },
          Size = { 70, 16 },
          HTextAlign = "Left"
        })
        
        layout["Longitude"] = {
          Style = "Text",
          Position = { 202, 21 },
          Size = { 55, 16 }
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Longitude",
          Position = { 132, 21 },
          Size = { 70, 16 },
          HTextAlign = "Left"
        })

        layout["Status"] = {
          Style = "Text",
          Position = { 62, 37 },
          Size = { 195, 16 }
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Status",
          Position = { 7, 37 },
          Size = { 55, 16 },
          HTextAlign = "Left"
        })
      end
      if v.name == "Current" then
        layout["Forecast Time"] = {
          Style = "Text",
          Position = { 92, 5 },
          Size = { 174, 16 },
          PrettyName = "Current~Time"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Forecast Time",
          Position = { 5, 5 },
          Size = { 87, 16 },
          HTextAlign = "Left"
        })

        layout["Description"] = {
          Style = "Text",
          Position = { 92, 21 },
          Size = { 174, 16 },
          PrettyName = "Current~Description"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Description",
          Position = { 5, 21 },
          Size = { 87, 16 },
          HTextAlign = "Left"
        })

        layout["Temperature"] = {
          Style = "Text",
          Position = { 92, 39 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Temperature"
        }
        if properties["Units"].Value == "US" then
          table.insert(graphics, {
            Type = "Label",
            Text = "Temperature (F)",
            Position = { 5, 39 },
            Size = { 87, 16 },
            HTextAlign = "Left"
          })
        else
          table.insert(graphics, {
            Type = "Label",
            Text = "Temperature (C)",
            Position = { 5, 39 },
            Size = { 87, 16 },
            HTextAlign = "Left"
          })
        end

        layout["Feels Like"] = {
          Style = "Text",
          Position = { 92, 55 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Feels Like"
        }
        if properties["Units"].Value == "US" then
          table.insert(graphics, {
            Type = "Label",
            Text = "Feels Like (F)",
            Position = { 5, 55 },
            Size = { 87, 16 },
            HTextAlign = "Left"
          })
        else
          table.insert(graphics, {
            Type = "Label",
            Text = "Feels Like (C)",
            Position = { 5, 55 },
            Size = { 87, 16 },
            HTextAlign = "Left"
          })
        end

        layout["Humidity"] = {
          Style = "Text",
          Position = { 230, 39 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Humidity"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Humidity (%)",
          Position = { 153, 39 },
          Size = { 77, 16 },
          HTextAlign = "Left"
        })

        layout["Dew Point"] = {
          Style = "Text",
          Position = { 230, 55 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Dew Point"
        }
        if properties["Units"].Value == "US" then
          table.insert(graphics, {
            Type = "Label",
            Text = "Dew Point (F)",
            Position = { 153, 55 },
            Size = { 77, 16 },
            HTextAlign = "Left"
          })
        else
          table.insert(graphics, {
            Type = "Label",
            Text = "Dew Point (C)",
            Position = { 153, 55 },
            Size = { 77, 16 },
            HTextAlign = "Left"
          })
        end

        layout["Clouds"] = {
          Style = "Text",
          Position = { 92, 85 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Clouds"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Clouds (%)",
          Position = { 5, 85 },
          Size = { 87, 16 },
          HTextAlign = "Left"
        })

        layout["UV Index"] = {
          Style = "Text",
          Position = { 230, 85 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~UV Index"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "UV Index",
          Position = { 153, 85 },
          Size = { 77, 16 },
          HTextAlign = "Left"
        })

        layout["Pressure"] = {
          Style = "Text",
          Position = { 92, 119 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Pressure"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Pressure (hPa)",
          Position = { 5, 119 },
          Size = { 87, 16 },
          HTextAlign = "Left"
        })

        layout["Wind Speed"] = {
          Style = "Text",
          Position = { 92, 147 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Wind Speed"
        }
        if properties["Units"].Value == "US" then
          table.insert(graphics, {
            Type = "Label",
            Text = "Wind Speed (mph)",
            Position = { 5, 147 },
            Size = { 87, 16 },
            HTextAlign = "Left",
            FontSize = 10
          })
        else
          table.insert(graphics, {
            Type = "Label",
            Text = "Wind Speed (m/s)",
            Position = { 5, 147 },
            Size = { 87, 16 },
            HTextAlign = "Left",
            FontSize = 10
          })
        end

        layout["Wind Heading"] = {
          Style = "Text",
          Position = { 92, 163 },
          Size = { 36, 16 },
          IsReadOnly = true,
          PrettyName = "Current~Wind Heading"
        }
        table.insert(graphics, {
          Type = "Label",
          Text = "Wind Heading",
          Position = { 5, 163 },
          Size = { 87, 16 },
          HTextAlign = "Left"
        })

        layout["Icon"] = {
          PrettyName = "Current~Icon",
          Style = "Button",
          ButtonStyle = "Trigger",
          UnlinkOffColor = true,
          OffColor = { 200, 200, 200, 0},
          Position = { 188, 119},
          Size = { 70, 70 },
          Margin = 0,
          Radius = 0,
          CornerRadius = 0,
        }

        -- table.insert(graphics, {
        --   Type = "Label",
        --   Text = "ICON?",
        --   Position = { 188, 119 },
        --   Size = { 70, 70 }
        -- })
      end
      if v.name == "Hourly" then
        local containerX = 5
        local containerY = 5
        local column = 1
        local containerHeight = 184
        local containerWidth = 150
        for i=1,properties["Forecast Hours"].Value do
          table.insert(graphics, {
            Type = "GroupBox",
            Position = { containerX, containerY },
            Size = { containerWidth, containerHeight },
            StrokeColor = {0, 0, 0},
            StrokeWidth = 1,
            CornerRadius = 8
          })

          layout["Hour " .. i .. " Time"] = {
            Style = "Text",
            Position = { containerX + 5, containerY + 8 },
            Size = { 140, 16 },
            PrettyName = "Hour " .. i .. "~Time"
          }
          layout["Hour " .. i .. " Description"] = {
            Style = "Text",
            Position = { containerX + 5, containerY + 24 },
            Size = { 140, 16 },
            PrettyName = "Hour " .. i .. "~Description"
          }

          layout["Hour " .. i .. " Temperature"] = {
            Style = "Text",
            Position = { containerX + 109, containerY + 40 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Hour " .. i .. "~Temperature"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Temperature (F)",
              Position = { containerX + 5, containerY + 40 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Temperature (C)",
              Position = { containerX + 5, containerY + 40 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end
  
          layout["Hour " .. i .. " Feels Like"] = {
            Style = "Text",
            Position = { containerX + 109, containerY + 56 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Hour " .. i .. "~Feels Like"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Feels Like (F)",
              Position = { containerX + 5, containerY + 56 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Feels Like (C)",
              Position = { containerX + 5, containerY + 56 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end
  
          layout["Hour " .. i .. " Humidity"] = {
            Style = "Text",
            Position = { containerX + 109, containerY + 72 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Hour " .. i .. "~Humidity"
          }
          table.insert(graphics, {
            Type = "Label",
            Text = "Humidity (%)",
            Position = { containerX + 5, containerY + 72 },
            Size = { 104, 16 },
            HTextAlign = "Left"
          })
  
          layout["Hour " .. i .. " Dew Point"] = {
            Style = "Text",
            Position = { containerX + 109, containerY + 88 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Hour " .. i .. "~Dew Point"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Dew Point (F)",
              Position = { containerX + 5, containerY + 88 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Dew Point (C)",
              Position = { containerX + 5, containerY + 88 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Hour " .. i .. " Wind Speed"] = {
            Style = "Text",
            Position = { containerX + 109, containerY + 104 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Hour " .. i .. "~Wind Speed"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Wind Speed (mph)",
              Position = { containerX + 5, containerY + 104 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Wind Speed (m/s)",
              Position = { containerX + 5, containerY + 104 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end
  
          layout["Hour " .. i .. " Wind Heading"] = {
            Style = "Text",
            Position = { containerX + 109, containerY + 120 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Hour " .. i .. "~Wind Heading"
          }
          table.insert(graphics, {
            Type = "Label",
            Text = "Wind Heading",
            Position = { containerX + 5, containerY + 120 },
            Size = { 104, 16 },
            HTextAlign = "Left"
          })

          layout["Hour " .. i .. " Icon"] = {
            PrettyName = "Hour " .. i .. "~Icon",
            Style = "Button",
            ButtonStyle = "Trigger",
            UnlinkOffColor = true,
            OffColor = { 200, 200, 200, 0},
            Position = { containerX + 109, containerY + 141},
            Size = { 36, 36 },
            Margin = 0,
            Radius = 0,
            CornerRadius = 0,
          }

          if column == 6 then
            column = 1
            containerX = 5
            containerY = containerY + containerHeight
          else
            column = column + 1
            containerX = containerX + containerWidth
          end
        end
      end
      if v.name == "Daily" then
        local containerX = 5
        local containerY = 5
        local column = 1
        local containerHeight = 364
        local containerWidth = 156
        for i=1,properties["Forecast Days"].Value do
          table.insert(graphics, {
            Type = "GroupBox",
            Position = { containerX, containerY },
            Size = { containerWidth, containerHeight },
            StrokeColor = {0, 0, 0},
            StrokeWidth = 1,
            CornerRadius = 8
          })

          layout["Day " .. i .. " Day"] = {
            Style = "Text",
            Position = { containerX + 8, containerY + 8 },
            Size = { 140, 16 },
            PrettyName = "Day " .. i .. "~Day"
          }
          layout["Day " .. i .. " Description"] = {
            Style = "Text",
            Position = { containerX + 8, containerY + 24 },
            Size = { 140, 16 },
            PrettyName = "Day " .. i .. "~Description"
          }

          layout["Day " .. i .. " High Temperature"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 40 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~High"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "High (F)",
              Position = { containerX + 8, containerY + 40 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "High (C)",
              Position = { containerX + 8, containerY + 40 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Low Temperature"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 56 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Low"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Low (F)",
              Position = { containerX + 8, containerY + 56 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Low (C)",
              Position = { containerX + 8, containerY + 56 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Humidity"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 72 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Humidity"
          }
          table.insert(graphics, {
            Type = "Label",
            Text = "Humidity (%)",
            Position = { containerX + 8, containerY + 72 },
            Size = { 104, 16 },
            HTextAlign = "Left"
          })

          layout["Day " .. i .. " Dew Point"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 88 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Dew Point"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Dew Point (F)",
              Position = { containerX + 8, containerY + 88 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Dew Point (C)",
              Position = { containerX + 8, containerY + 88 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Morning Temperature"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 120 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Morning"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Morning (F)",
              Position = { containerX + 8, containerY + 120 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Morning (C)",
              Position = { containerX + 8, containerY + 120 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Day Temperature"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 136 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Day"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Day (F)",
              Position = { containerX + 8, containerY + 136 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Day (C)",
              Position = { containerX + 8, containerY + 136 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Evening Temperature"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 152 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Evening"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Evening (F)",
              Position = { containerX + 8, containerY + 152 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Evening (C)",
              Position = { containerX + 8, containerY + 152 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Night Temperature"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 168 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Night"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Night (F)",
              Position = { containerX + 8, containerY + 168 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Night (C)",
              Position = { containerX + 8, containerY + 168 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end

          layout["Day " .. i .. " Cloud"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 201 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Cloud"
          }
          table.insert(graphics, {
            Type = "Label",
            Text = "Cloud (%)",
            Position = { containerX + 8, containerY + 201 },
            Size = { 104, 16 },
            HTextAlign = "Left"
          })

          layout["Day " .. i .. " UV Index"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 217 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~UV Index"
          }
          table.insert(graphics, {
            Type = "Label",
            Text = "UV Index",
            Position = { containerX + 8, containerY + 217 },
            Size = { 104, 16 },
            HTextAlign = "Left"
          })

          layout["Day " .. i .. " Wind Speed"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 249 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Wind Speed"
          }
          if properties["Units"].Value == "US" then
            table.insert(graphics, {
              Type = "Label",
              Text = "Wind Speed (mph)",
              Position = { containerX + 8, containerY + 249 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          else
            table.insert(graphics, {
              Type = "Label",
              Text = "Wind Speed (m/s)",
              Position = { containerX + 8, containerY + 249 },
              Size = { 104, 16 },
              HTextAlign = "Left"
            })
          end
  
          layout["Day " .. i .. " Wind Heading"] = {
            Style = "Text",
            Position = { containerX + 112, containerY + 265 },
            Size = { 36, 16 },
            IsReadOnly = true,
            PrettyName = "Day " .. i .. "~Wind Heading"
          }
          table.insert(graphics, {
            Type = "Label",
            Text = "Wind Heading",
            Position = { containerX + 8, containerY + 265 },
            Size = { 104, 16 },
            HTextAlign = "Left"
          })

          layout["Day " .. i .. " Icon"] = {
            PrettyName = "Day" .. i .. "~Icon",
            Style = "Button",
            ButtonStyle = "Trigger",
            UnlinkOffColor = true,
            OffColor = { 200, 200, 200, 0},
            Position = { containerX + 40, containerY + 281},
            Size = { 70, 70 },
            Margin = 0,
            Radius = 0,
            CornerRadius = 0,
          }

          containerX = containerX + containerWidth
        end
      end
    end
  end
  return layout, graphics
end


if Controls then
json = require("rapidjson")

local statusStates = {
  OK = 0,
  COMPROMISED = 1,
  FAULT = 2,
  NOTPRESENT = 3,
  MISSING = 4,
  INITIALIZING = 5
}

function setStatus(key, message)
  Controls["Status"].Value = statusStates[key]
  Controls["Status"].String = message
end
setStatus("INITIALIZING", "Starting up")

function weatherDataCallback(tbl, code, data, err, headers)
  if code == 200 then
    setStatus("OK", "")
    local parseddata = json.decode(data)
    Controls["Forecast Time"].String = os.date("%c", parseddata.dt)
    Controls["Temperature"].Value = parseddata.current.temp
    Controls["Feels Like"].Value = parseddata.current.feels_like
    Controls["Humidity"].Value = parseddata.current.humidity
    Controls["Clouds"].Value = parseddata.current.clouds
    Controls["Dew Point"].Value = parseddata.current.dew_point
    Controls["Pressure"].Value = parseddata.current.pressure
    Controls["UV Index"].Value = parseddata.current.uvi
    Controls["Wind Speed"].Value = parseddata.current.wind_speed
    Controls["Wind Heading"].Value = parseddata.current.wind_deg
    Controls["Description"].String = parseddata.current.weather[1].main .. " - " .. parseddata.current.weather[1].description
    
    Controls["Icon"].Legend = json.encode({
      DrawState = true,
      IconData = ICON_DATA[parseddata.current.weather[1].icon]
    })
    -- Hourlies
    for k, v in pairs(parseddata.hourly) do
      local timeDiffHours = ((v.dt - parseddata.current.dt) / 60) / 60
      if timeDiffHours > 0 then
        local indexHours = math.ceil(timeDiffHours)
        if indexHours <= Properties["Forecast Hours"].Value then
          Controls["Hour " .. indexHours .. " Time"].String = os.date("%H:%M UTC", v.dt)
          Controls["Hour " .. indexHours .. " Temperature"].Value = v.temp
          Controls["Hour " .. indexHours .. " Feels Like"].Value = v.feels_like
          Controls["Hour " .. indexHours .. " Humidity"].Value = v.humidity
          Controls["Hour " .. indexHours .. " Dew Point"].Value = v.dew_point
          Controls["Hour " .. indexHours .. " Wind Speed"].Value = v.wind_speed
          Controls["Hour " .. indexHours .. " Wind Heading"].Value = v.wind_deg
          Controls["Hour " .. indexHours .. " Description"].String = v.weather[1].main .. " - " .. v.weather[1].description
        
          Controls["Hour " .. indexHours .. " Icon"].Legend = json.encode({
            DrawState = true,
            IconData = ICON_DATA[v.weather[1].icon]
          })
        end
      end
    end
    
    -- Dayiles
    for k, v in pairs(parseddata.daily) do
      local timeDiffDays = (((v.dt - parseddata.current.dt) / 60) / 60) / 24
      if timeDiffDays > 0 then
        local indexDays = math.ceil(timeDiffDays)
        if indexDays <= Properties["Forecast Days"].Value then
          Controls["Day " .. indexDays .. " Day"].String = os.date("%A", v.dt)
          Controls["Day " .. indexDays .. " High Temperature"].Value = v.temp.max
          Controls["Day " .. indexDays .. " Low Temperature"].Value = v.temp.min
          Controls["Day " .. indexDays .. " Morning Temperature"].Value = v.temp.morn
          Controls["Day " .. indexDays .. " Evening Temperature"].Value = v.temp.eve
          Controls["Day " .. indexDays .. " Day Temperature"].Value = v.temp.day
          Controls["Day " .. indexDays .. " Night Temperature"].Value = v.temp.night
          Controls["Day " .. indexDays .. " Humidity"].Value = v.humidity
          Controls["Day " .. indexDays .. " Dew Point"].Value = v.dew_point
          Controls["Day " .. indexDays .. " Cloud"].Value = v.clouds
          Controls["Day " .. indexDays .. " UV Index"].Value = v.uvi
          Controls["Day " .. indexDays .. " Wind Speed"].Value = v.wind_speed
          Controls["Day " .. indexDays .. " Wind Heading"].Value = v.wind_deg
          Controls["Day " .. indexDays .. " Description"].String = v.weather[1].main .. " - " .. v.weather[1].description
        
          Controls["Day " .. indexDays .. " Icon"].Legend = json.encode({
            DrawState = true,
            IconData = ICON_DATA[v.weather[1].icon]
          })
        end
      end
    end
  else
    setStatus("FAULT", "API Error " .. code .. " [" .. err .. "] '" .. data .. "'")
    print("API returned " .. code)
    print(err)
  end
end

function updateWeatherData()
  local lat = Controls["Latitude"].String
  local lon = Controls["Longitude"].String
  local api = Controls["API Key"].String
  local units = "metric"
  if Properties["Units"].Value == "US" then
    units = "imperial"
  end
  local url = HttpClient.CreateUrl({
    Host = "https://api.openweathermap.org",
    Path = "data/2.5/onecall",
    Query = {
      appid = api,
      lat = lat,
      lon = lon,
      units = units
    }
  })
  print("Calling " .. url)
  HttpClient.Download({
    Url = url,
    Timeout = 10,
    EventHandler = weatherDataCallback
  })
end

updateWeatherData()

Controls["Update"].EventHandler = updateWeatherData

updateTimer = Timer.New()
updateTimer.EventHandler = updateWeatherData
updateTimer:Start(300)
end